import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";

import { api } from "../utils/api";

const Home: NextPage = () => {
  const tasks = api.task.getAll.useQuery()

  const utils = api.useContext()
  const mutation = api.task.toggle.useMutation({
    onMutate: async ({id, isCompleted}) => {
      await utils.task.getAll.cancel()

      const previousTasks = utils.task.getAll.getData()

      utils.task.getAll.setData(undefined, (prev) => {
        if (!prev) return previousTasks
        return prev.map(task => {
          if (task.id === id) {
            return ({
              ...task,
              isCompleted
            })
          }
          return task
        })
      })
      return {previousTasks}
    },
    onError: (_err, _task, context) => {
      if (!context) return
      utils.task.getAll.setData(undefined, () => context.previousTasks)
    },
    onSettled: async () => {
      await utils.task.getAll.invalidate()
    },
  })

  return (
    <>
      <Head>
        <title>ToDo</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-start bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">ToDo</span> App
          </h1>
          <Form />
          <div className="flex flex-col gap-2">
            {tasks.data?.map((task, index) => (
              <div key={index} className="flex items-center justify-start">
                <input id={`task-${index}`} type="checkbox" value="" checked={task.isCompleted} onChange={() => mutation.mutate({id: task.id, isCompleted: !task.isCompleted})} className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />
                <label htmlFor={`task-${index}`} className={`ml-2 text-xl font-medium text-gray-900 dark:text-gray-300 ${task.isCompleted && "line-through"}`}>{task.text}</label>
              </div>
            ))}
          </div>
        </div>
      </main>
    </>
  );
};

const Form = () => {
  const [text, setText] = useState("");
  const utils = api.useContext()

  const mutation = api.task.create.useMutation({
    onMutate: async (newTask) => {
      await utils.task.getAll.cancel()

      const previousTasks = utils.task.getAll.getData()

      utils.task.getAll.setData(undefined, (prev) => {
        return [
          {
            id: "optimistic-todo-id",
            text: newTask.text,
            isCompleted: false,
            createdAt: new Date(),
            updatedAt: new Date()
          },
          ...(prev || [])
        ]
      })

      setText("")

      return {previousTasks}
    },
    onError: (_err, newTask, context) => {
      setText(newTask.text)
      if (!context) return
      utils.task.getAll.setData(undefined, () => context.previousTasks)
    },
    onSettled: async () => {
      await utils.task.getAll.invalidate()
    },
  })

  return (
    <form
      className="flex gap-2"
      onSubmit={async (event) => {
        event.preventDefault();
        await mutation.mutateAsync({ text: text })
      }}
    >
      <input
        type="text"
        className="shadow appearance-none border rounded px-4 py-2 text-grey-darker"
        placeholder="Your task..."
        minLength={2}
        maxLength={100}
        value={text}
        onChange={(event) => setText(event.target.value)}
      />
      <button
        type="submit"
        className="flex-no-shrink p-2 border-2 rounded text-white border-white hover:text-[hsl(280,100%,70%)] hover:bg-white"
      >
        Submit
      </button>
    </form>
  );
}

export default Home;
